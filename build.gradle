import com.github.gradle.node.npm.task.NpmTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.github.node-gradle.node' version '7.0.1'
}

group = 'com.gijun'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Swagger UI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
}

bootJar {
    manifest {
        attributes(
                'Spring-Profile': project.hasProperty('profile') ? project.property('profile') : 'dev'
        )
    }
}

bootRun {
    systemProperty "spring.profiles.active", System.getProperty("spring.profiles.active", "dev")
    doFirst {
        println "Running bootRun with profile: ${System.getProperty("spring.profiles.active", "dev")}"
    }
}

node {
    version = '20.10.0'
    npmVersion = '10.2.3'
    download = true
    nodeProjectDir = file("${project.projectDir}/frontend")
}

// 기존 npmInstall 태스크 설정 수정
tasks.named('npmInstall') {
    workingDir = file("${project.projectDir}/frontend")
    outputs.dir("${project.projectDir}/frontend/node_modules")
    outputs.file("${project.projectDir}/frontend/package-lock.json")
}

// 환경별 npm 빌드 태스크
tasks.register('npmBuildDev', NpmTask) {
    dependsOn npmInstall
    args = ['run', 'build:dev']
    workingDir = file("${project.projectDir}/frontend")
    inputs.files("${project.projectDir}/frontend/package.json")
    inputs.files("${project.projectDir}/frontend/package-lock.json")
    inputs.dir("${project.projectDir}/frontend/src")
    outputs.dir("${project.projectDir}/frontend/dist")
    doFirst {
        println "Starting npmBuildDev with development configuration"
    }
}

def npmBuildTask = tasks.register('npmBuild', NpmTask) {
    dependsOn npmInstall
    doFirst {
        def buildMode = project.hasProperty('profile') && project.property('profile') == 'prod' ? 'build:prod' : 'build:dev'
        println "Building frontend for ${buildMode} mode"
    }
    args = ['run', project.hasProperty('profile') && project.property('profile') == 'prod' ? 'build:prod' : 'build:dev']
    workingDir = file("${project.projectDir}/frontend")
}

// 기존 copyFrontendBuild 태스크 수정
tasks.register('copyFrontendBuild', Copy) {
    dependsOn npmBuildTask
    from("${project.projectDir}/frontend/dist")
    into("${buildDir}/resources/main/static")
    doFirst {
        println "Copying frontend build to resources/static directory"
    }
}

// 프로덕션 빌드 전용 태스크
tasks.register('buildProd') {
    dependsOn clean
    dependsOn bootJar
    doFirst {
        println "Building for production..."
        project.ext.set("profile", "prod")
    }
}

// 개발 빌드 전용 태스크
tasks.register('buildDev') {
    dependsOn clean
    dependsOn bootJar
    doFirst {
        println "Building for development..."
        project.ext.set("profile", "dev")
    }
}

// npm 개발 서버 실행 태스크
tasks.register('npmDev', NpmTask) {
    args = ['run', 'dev']
    workingDir = file("${project.projectDir}/frontend")
    doFirst {
        println "Starting npm development server"
    }
}

// 빌드 로그 메시지 추가
gradle.taskGraph.whenReady { graph ->
    println "==== Build Information ===="
    println "Profile: ${project.hasProperty('profile') ? project.property('profile') : 'dev'}"
    println "Java Version: ${java.toolchain.languageVersion.get()}"
    println "Node Version: ${node.version}"
    println "NPM Version: ${node.npmVersion}"
    println "==========================="
}

tasks.named('clean') {
    delete "${buildDir}/resources/main/static"
    delete "${project.projectDir}/frontend/dist"
}

tasks.named('processResources') {
    dependsOn copyFrontendBuild
}

tasks.named('bootJar') {
    dependsOn processResources
}

tasks.named('bootRun') {
    dependsOn processResources
}

tasks.named('test') {
    useJUnitPlatform()
}
