import com.github.gradle.node.npm.task.NpmTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.github.node-gradle.node' version '7.0.1'
}

group = 'com.gijun'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Redis
    implementation 'io.netty:netty-all:4.1.79.Final'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Swagger UI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
}

bootJar {
    dependsOn processResources
    // bootJar는 항상 production 프로필 사용
    doFirst {
        println "Generating production JAR..."
        System.setProperty("spring.profiles.active", "prod")
    }
}

bootRun {
    // bootRun은 항상 development 프로필 사용
    systemProperty "spring.profiles.active", "dev"
    jvmArgs = ["-Dspring.profiles.active=dev"]

    doFirst {
        println "Running application in development mode..."
    }
}

node {
    version = '20.10.0'
    npmVersion = '10.2.3'
    download = true
    nodeProjectDir = file("${project.projectDir}/frontend")
}

// npm 태스크들
tasks.named('npmInstall') {
    workingDir = file("${project.projectDir}/frontend")
    outputs.dir("${project.projectDir}/frontend/node_modules")
    outputs.file("${project.projectDir}/frontend/package-lock.json")
}

// 개발용 프론트엔드 빌드 태스크
tasks.register('npmBuildDev', NpmTask) {
    dependsOn npmInstall
    args = ['run', 'build:dev']
    workingDir = file("${project.projectDir}/frontend")
    inputs.files("${project.projectDir}/frontend/package.json")
    inputs.files("${project.projectDir}/frontend/package-lock.json")
    inputs.dir("${project.projectDir}/frontend/src")
    outputs.dir("${project.projectDir}/frontend/dist")
    doFirst {
        println "Starting npmBuildDev with development configuration"
    }
}

// 프로덕션용 프론트엔드 빌드 태스크
tasks.register('npmBuildProd', NpmTask) {
    dependsOn npmInstall
    args = ['run', 'build:prod']
    workingDir = file("${project.projectDir}/frontend")

    doFirst {
        // 빌드 전 dist 디렉토리 삭제
        delete "${project.projectDir}/frontend/dist"
        println "Building frontend in production mode..."
    }
}

// 개발 서버 실행 태스크
tasks.register('npmDev', NpmTask) {
    args = ['run', 'dev']
    workingDir = file("${project.projectDir}/frontend")
    environment = [
            'NODE_ENV': 'development'
    ]
    doFirst {
        println "Starting npm development server in development mode"
    }
}

// 프론트엔드 빌드 복사 태스크
tasks.register('copyFrontendBuild', Copy) {
    dependsOn npmBuildProd

    doFirst {
        // 기존 static 디렉토리 삭제
        delete "${buildDir}/resources/main/static"

        // dist 디렉토리가 없으면 생성
        def distDir = file("${project.projectDir}/frontend/dist")
        if (!distDir.exists()) {
            distDir.mkdirs()
        }

        println "Copying frontend build to resources/static directory"
    }

    from("${project.projectDir}/frontend/dist") {
        includeEmptyDirs = false
    }
    into("${buildDir}/resources/main/static")

    onlyIf {
        file("${project.projectDir}/frontend/dist").exists() &&
                file("${project.projectDir}/frontend/dist").list()?.length > 0
    }
}

// 백엔드 프로덕션 빌드 태스크
tasks.register('buildBackendProd') {
    dependsOn clean
    dependsOn copyFrontendBuild
    doFirst {
        println "Building backend for production..."
        project.ext.set("profile", "prod")
        System.setProperty("spring.profiles.active", "prod")
    }
    finalizedBy bootJar
}

// 개발 환경용 빌드 태스크
tasks.register('buildDev') {
    dependsOn clean
    dependsOn npmBuildDev
    finalizedBy bootJar
    doFirst {
        println "Building for development..."
        System.setProperty("spring.profiles.active", "dev")
    }
}

// 개발 환경 실행 태스크
tasks.register('devRun') {
    group = 'application'
    description = 'Runs the application in development mode'

    doFirst {
        System.setProperty("spring.profiles.active", "dev")
        println "Starting application in development mode..."
    }

    dependsOn bootRun
    dependsOn npmDev

    bootRun.mustRunAfter npmDev
}

// 빌드 정보 출력
gradle.taskGraph.whenReady { graph ->
    println "==== Build Information ===="
    println "Profile: ${project.hasProperty('profile') ? project.property('profile') : 'dev'}"
    println "Java Version: ${java.toolchain.languageVersion.get()}"
    println "Node Version: ${node.version}"
    println "NPM Version: ${node.npmVersion}"
    println "==========================="
}

// Clean 태스크
tasks.named('clean') {
    delete "${buildDir}/resources/main/static"
    delete "${project.projectDir}/frontend/dist"
}

// Resource 처리 태스크
tasks.named('processResources') {
    // 프로덕션 빌드일 때만 copyFrontendBuild 실행
    if (System.getProperty("spring.profiles.active") != "dev") {
        dependsOn copyFrontendBuild
    }
}

// 테스트 태스크
tasks.named('test') {
    useJUnitPlatform()
}